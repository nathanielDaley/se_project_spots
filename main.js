!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-btn",inactiveButtonClass:"modal__submit-btn_inactive",inputErrorClass:"modal__input_type_error"},t=(e,t,r)=>{const n=e.querySelector(`#${t.id}-error`);t.classList.remove(r.inputErrorClass),n.textContent=""},r=(e,t,r)=>{(e=>e.some((e=>!e.validity.valid)))(e)?n(t,r):(t.classList.remove(r.inactiveButtonClass),t.disabled=!1)},n=(e,t)=>{e.classList.add(t.inactiveButtonClass),e.disabled=!0},o=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error getting user info: ${e.status}`)))}editUserInfo(e){let{name:t,about:r}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})}).then((e=>e.ok?e.json():Promise.reject(`Error editing user info: ${e.status}`)))}editUserAvatar(e){let{avatar:t}=e;return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then((e=>e.ok?e.json():Promise.reject(`Error editing user info: ${e.status}`)))}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error getting intital cards: ${e.status}`)))}addCard(e){let{name:t,link:r}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})}).then((e=>e.ok?e.json():Promise.reject(`Error adding card: ${e.status}`)))}deleteCard(e){let{id:t}=e;return fetch(`${this._baseUrl}/cards/${t}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error deleting card: ${e.status}`)))}changeCardLikeStatus(e){let{id:t,isLiked:r}=e;const n=r?"DELETE":"PUT";return fetch(`${this._baseUrl}/cards/${t}/likes`,{method:n,headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error deleting card: ${e.status}`)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"f7822124-59b5-42fe-a8b8-2f48bd0b923b","Content-Type":"application/json"}}),a=document.querySelector(".profile__edit-btn"),s=document.querySelector(".profile__add-btn"),i=document.querySelector(".profile__name"),c=document.querySelector(".profile__description"),l=document.querySelector(".profile__avatar"),d=document.querySelector(".profile__avatar-btn"),u=document.querySelector("#edit-profile-modal"),m=document.forms["edit-profile-form"],_=m.querySelector(".modal__submit-btn"),h=u.querySelector(".modal__input#name-input"),f=u.querySelector(".modal__input#description-input"),v=document.querySelector("#edit-profile-avatar-modal"),p=document.forms["edit-profile-avatar-form"],y=v.querySelector(".modal__input#avatar-link-input"),b=document.querySelector("#new-post-modal"),S=document.forms["new-post-form"],k=b.querySelector(".modal__input#image-link-input"),E=b.querySelector(".modal__input#caption-input"),g=document.querySelector("#delete-modal"),L=g.querySelector(".modal__delete-btn"),q=g.querySelector(".modal__cancel-btn"),C=document.querySelector("#preview-modal"),$=C.querySelector(".modal__image"),U=C.querySelector(".modal__caption"),j=document.querySelectorAll(".modal__close-btn"),P=document.querySelector("#card"),x=document.querySelector(".cards__list");let A,I;function T(e){e.classList.add("modal_opened"),e.focus(),e.addEventListener("click",B),e.addEventListener("keydown",N)}function D(e){e.classList.remove("modal_opened"),e.removeEventListener("click",B),e.removeEventListener("keydown",N)}function w(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"prepend";const r=function(e){const t=P.content.querySelector(".card").cloneNode(!0),r=t.querySelector(".card__title"),n=t.querySelector(".card__image"),a=t.querySelector(".card__like-btn"),s=t.querySelector(".card__delete-btn");return n.src=e.link,n.alt=e.name,r.textContent=e.name,e.isLiked&&a.classList.toggle("card__like-btn_liked"),a.addEventListener("click",(t=>function(e,t){o.changeCardLikeStatus({id:t._id,isLiked:t.isLiked}).then((()=>{e.target.classList.toggle("card__like-btn_liked")})).catch(console.error)}(t,e))),s.addEventListener("click",(()=>{!function(e,t){A=e,I=t._id,T(g)}(t,e)})),n.addEventListener("click",(()=>{$.src=e.link,U.textContent=e.name,$.alt=e.name,T(C)})),t}(e);x[t](r)}function B(e){e.target.classList.contains("modal_opened")&&D(e.target)}function N(e){"Escape"===e.key&&D(e.currentTarget)}var O;a.addEventListener("click",(()=>{var r,n;h.value=i.textContent,f.value=c.textContent,r=m,n=e,[h,f].forEach((e=>t(r,e,n))),T(u)})),m.addEventListener("submit",(function(t){t.preventDefault(),o.editUserInfo({name:h.value,about:f.value}).then((t=>{i.textContent=t.name,c.textContent=t.about,n(_,e),D(u)})).catch(console.error)})),d.addEventListener("click",(()=>{T(v)})),p.addEventListener("submit",(function(e){e.preventDefault(),o.editUserAvatar({avatar:y.value}).then((t=>{l.src=t.avatar,e.target.reset(),D(v)})).catch(console.error),console.log()})),s.addEventListener("click",(()=>{T(b)})),S.addEventListener("submit",(function(e){e.preventDefault(),o.addCard({name:E.value,link:k.value}).then((t=>{w({name:t.name,link:t.link}),e.target.reset(),D(b)})).catch(console.error)})),L.addEventListener("click",(function(e){e.preventDefault(),console.log("test"),o.deleteCard({id:I}).then((()=>{A.remove(),D(g)})).catch(console.error)})),q.addEventListener("click",(function(e){e.preventDefault(),D(g)})),j.forEach((e=>{const t=e.closest(".modal");e.addEventListener("click",(()=>D(t)))})),o.getAppInfo().then((e=>{let[t,r]=e;t.forEach((e=>{w(e,"append")})),i.textContent=r.name,c.textContent=r.about,l.src=r.avatar})).catch(console.error),O=e,document.querySelectorAll(O.formSelector).forEach((e=>((e,o)=>{const a=Array.from(e.querySelectorAll(o.inputSelector)),s=e.querySelector(o.submitButtonSelector);r(a,s,o),e.addEventListener("reset",(()=>{n(s,o)})),a.forEach((n=>{n.addEventListener("input",(()=>{((e,r,n)=>{r.validity.valid?t(e,r,n):((e,t,r,n)=>{const o=e.querySelector(`#${t.id}-error`);t.classList.add(n.inputErrorClass),o.textContent=r})(e,r,r.validationMessage,n)})(e,n,o),r(a,s,o)}))}))})(e,O)))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,